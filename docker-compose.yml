services:
  web:
    build:
      context: .
    command: >
      sh -c "python manage.py collectstatic --noinput &&
             python manage.py migrate &&
             python manage.py runserver 0.0.0.0:8000"
    ports:
      - "8000:8000"
    volumes:
      - ./src:/src
    environment:
      - SECRET_KEY=${SECRET_KEY}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
      - CSRF_TRUSTED_ORIGINS=${CSRF_TRUSTED_ORIGINS}
      - DEBUG=${DEBUG}
      - ENVIRONMENT=${ENVIRONMENT}

      # - DATABASE_NAME=${DATABASE_NAME}
      # - DATABASE_USER=${DATABASE_USER}
      # - DATABASE_PASSWORD=${DATABASE_PASSWORD}
      # - DATABASE_HOST=${DATABASE_HOST}
      # - DATABASE_PORT=${DATABASE_PORT}

      - SIGNING_KEY=${SIGNING_KEY}
      - ACCESS_TOKEN_LIFETIME=${ACCESS_TOKEN_LIFETIME}
      - REFRESH_TOKEN_LIFETIME=${REFRESH_TOKEN_LIFETIME}
      - ROTATE_REFRESH_TOKENS=${ROTATE_REFRESH_TOKENS}
      - BLACKLIST_AFTER_ROTATION=${BLACKLIST_AFTER_ROTATION}
      - UPDATE_LAST_LOGIN=${UPDATE_LAST_LOGIN}
      - ALGORITHM=${ALGORITHM}
    # depends_on:
    #   db:
    #     condition: service_healthy

  # db:
  #   image: postgres:15.4
  #   restart: always
  #   volumes:
  #     - ./data/bank_system_db:/var/lib/postgresql/data
  #   environment:
  #     - POSTGRES_DB=${DATABASE_NAME}
  #     - POSTGRES_USER=${DATABASE_USER}
  #     - POSTGRES_PASSWORD=${DATABASE_PASSWORD}
  #   healthcheck:
  #     test:
  #       [
  #         "CMD",
  #         "pg_isready",
  #         "-U",
  #         "${DATABASE_USER}",
  #         "-d",
  #         "${DATABASE_NAME}",
  #       ]

  #     interval: 10s
  #     timeout: 5s
  #     retries: 5
